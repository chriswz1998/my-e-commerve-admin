generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Nav1 {
  id              String   @id @default(uuid()) // 使用UUID作为ID
  name_ch         String
  can_has_sub_nav Boolean?
  name_en         String?
  link            String? // optional link
  disable         Boolean? @default(false)
  nav_2           Nav2[] // One-to-many relationship with Nav2
}

model Nav2 {
  id             String   @id @default(uuid()) // 使用UUID作为ID
  name_ch        String
  name_en        String?
  disable        Boolean? @default(false)
  description_ch String
  description_en String?
  nav_3          Nav3[] // One-to-many relationship with Nav3
  nav1Id         String
  nav1           Nav1     @relation(fields: [nav1Id], references: [id], onDelete: Cascade)
}

model Nav3 {
  id      String   @id @default(uuid()) // 使用UUID作为ID
  name_ch String
  name_en String?
  link    String? // optional link
  disable Boolean? @default(false)
  nav2Id  String
  nav2    Nav2     @relation(fields: [nav2Id], references: [id], onDelete: Cascade)
}

model Content {
  id           String        @id @default(uuid()) // 使用 UUID 作为字符串主键
  title_ch     String
  title_en     String
  image_url    String
  desc_ch      String
  desc_en      String
  content_item ContentItem[] // 建立一对多关系，引用 ContentItem

  // 创建记录时间
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContentItem {
  id        String  @id @default(uuid()) // 使用 UUID 作为字符串主键
  title_ch  String
  title_en  String
  desc_ch   String
  desc_en   String
  detail    String  @db.Text
  contentId String // 外键，关联 Content 的 id
  content   Content @relation(fields: [contentId], references: [id]) // 关系字段

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CaseCategory {
  id    String @id @default(uuid()) // Primary key, UUID format
  name  String @unique // Category name, unique for each category
  cases Case[] // One-to-many relationship with Case

  createAt  DateTime @default(now()) // Record creation timestamp
  updatedAt DateTime @updatedAt // Record update timestamp
}

model Case {
  id              String       @id @default(uuid()) // Primary key, UUID format
  title_ch        String // Title in Chinese
  title_en        String // Title in English
  detail          String       @db.Text // Detailed description
  case_categoryId String // Foreign key for CaseCategory
  case_category   CaseCategory @relation(fields: [case_categoryId], references: [id])

  createAt  DateTime @default(now()) // Record creation timestamp
  updatedAt DateTime @updatedAt // Record update timestamp
}

model NewsCategory {
  id        String @id @default(uuid()) // Primary key, UUID format
  name      String @unique // Category name, unique for each category
  newsItems News[] // One-to-many relationship with News

  createAt  DateTime @default(now()) // Record creation timestamp
  updatedAt DateTime @updatedAt // Record update timestamp
}

model News {
  id             String       @id @default(uuid()) // Primary key, UUID format
  title_ch       String // Title in Chinese
  title_en       String // Title in English
  detail         String       @db.Text // Detailed description
  newsCategoryId String // Foreign key for NewsCategory
  newsCategory   NewsCategory @relation(fields: [newsCategoryId], references: [id])

  createAt  DateTime @default(now()) // Record creation timestamp
  updatedAt DateTime @updatedAt // Record update timestamp
}

model LiscensOrder {
  id        String   @id @default(uuid())
  isPaid    Boolean  @default(false)
  phone     String
  wx        String
  email     String
  statusId  String
  status    Status   @relation(fields: [statusId], references: [id])
  price     Decimal
  pic_1     String
  pic_2     String
  pic_3     String
  pic_4     String
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Status {
  id           String         @id @default(uuid())
  name         String
  createAt     DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  LiscensOrder LiscensOrder[]
}
