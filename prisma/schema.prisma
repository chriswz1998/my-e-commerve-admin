generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Nav1 {
  id              String   @id @default(uuid()) // 使用UUID作为ID
  name_ch         String
  can_has_sub_nav Boolean?
  name_en         String?
  link            String? // optional link
  disable         Boolean? @default(false)
  nav_2           Nav2[] // One-to-many relationship with Nav2
}

model Nav2 {
  id             String   @id @default(uuid()) // 使用UUID作为ID
  name_ch        String
  name_en        String?
  disable        Boolean? @default(false)
  description_ch String
  description_en String?
  nav_3          Nav3[] // One-to-many relationship with Nav3
  nav1Id         String
  nav1           Nav1     @relation(fields: [nav1Id], references: [id], onDelete: Cascade)
}

model Nav3 {
  id      String   @id @default(uuid()) // 使用UUID作为ID
  name_ch String
  name_en String?
  link    String? // optional link
  disable Boolean? @default(false)
  nav2Id  String
  nav2    Nav2     @relation(fields: [nav2Id], references: [id], onDelete: Cascade)
}

model Content {
  id           String        @id @default(uuid()) // 使用 UUID 作为字符串主键
  title_ch     String
  title_en     String
  image_url    String
  desc_ch      String
  desc_en      String
  content_item ContentItem[] // 建立一对多关系，引用 ContentItem

  // 创建记录时间
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContentItem {
  id        String  @id @default(uuid()) // 使用 UUID 作为字符串主键
  title_ch  String
  title_en  String
  desc_ch   String
  desc_en   String
  detail    String  @db.Text
  contentId String // 外键，关联 Content 的 id
  content   Content @relation(fields: [contentId], references: [id]) // 关系字段

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CaseCategory {
  id    String @id @default(uuid()) // Primary key, UUID format
  name  String @unique // Category name, unique for each category
  cases Case[] // One-to-many relationship with Case

  createdAt DateTime @default(now()) // Record creation timestamp
  updatedAt DateTime @updatedAt // Record update timestamp
}

model Case {
  id              String       @id @default(uuid()) // Primary key, UUID format
  title_ch        String // Title in Chinese
  title_en        String // Title in English
  detail          String       @db.Text // Detailed description
  case_categoryId String // Foreign key for CaseCategory
  case_category   CaseCategory @relation(fields: [case_categoryId], references: [id])

  createdAt DateTime @default(now()) // Record creation timestamp
  updatedAt DateTime @updatedAt // Record update timestamp
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  createAt   DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  size       Size[]      @relation("StoreToSize")
  Color      Color[]     @relation("StoreToColor")
  Product    Product[]   @relation("StoreToProduct")
  Order      Order[]     @relation("StoreToOrder")
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  createAt   DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  categories Category[]

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  createAt    DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Product     Product[] @relation("CategoryToProduct")

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id       String    @id @default(uuid())
  storeId  String
  store    Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name     String
  value    String
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  Product  Product[]

  @@index([storeId])
}

model Color {
  id       String    @id @default(uuid())
  storeId  String
  store    Store     @relation("StoreToColor", fields: [storeId], references: [id])
  name     String
  value    String
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  Product  Product[]

  @@index([storeId])
}

model Product {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category   Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name       String
  price      Decimal
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  sizeId     String
  size       Size        @relation(fields: [sizeId], references: [id])
  colorId    String
  color      Color       @relation(fields: [colorId], references: [id])
  images     Image[]
  createAt   DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  OrderItems OrderItem[]

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  url       String
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  isPaid     Boolean     @default(false)
  phone      String
  address    String      @default("")
  createAt   DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  Order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
